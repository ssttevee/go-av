// Code generated by robots; DO NOT EDIT.
//go:build av_dynamic
// +build av_dynamic

package avutil

import (
	errors "github.com/pkg/errors"
	common "github.com/ssttevee/go-av/internal/common"
	"runtime"
	"sync"
	"unsafe"
)

/*
#cgo LDFLAGS: -ldl

#include <stdlib.h>
#include <stdint.h>
#include <dlfcn.h>

struct AVBufferRef;
struct AVDictionary;
struct AVFrame;
struct AVOption;
struct AVRational{};

static void *handle = 0;

static int (*_av_frame_copy_props)(struct AVFrame*, struct AVFrame*);

int dyn_av_frame_copy_props(struct AVFrame* p0, struct AVFrame* p1) {
    return _av_frame_copy_props(p0, p1);
};

static char* (*_av_strdup)(char*);

char* dyn_av_strdup(char* p0) {
    return _av_strdup(p0);
};

static struct AVOption* (*_av_opt_find2)(void*, char*, char*, int, int, void**);

struct AVOption* dyn_av_opt_find2(void* p0, char* p1, char* p2, int p3, int p4, void** p5) {
    return _av_opt_find2(p0, p1, p2, p3, p4, p5);
};

static void (*_av_free)(void*);

void dyn_av_free(void* p0) {
    _av_free(p0);
};

static void (*_av_dict_free)(struct AVDictionary**);

void dyn_av_dict_free(struct AVDictionary** p0) {
    _av_dict_free(p0);
};

static void (*_av_frame_free)(struct AVFrame**);

void dyn_av_frame_free(struct AVFrame** p0) {
    _av_frame_free(p0);
};

static int (*_av_hwframe_get_buffer)(struct AVBufferRef*, struct AVFrame*, int);

int dyn_av_hwframe_get_buffer(struct AVBufferRef* p0, struct AVFrame* p1, int p2) {
    return _av_hwframe_get_buffer(p0, p1, p2);
};

static int (*_av_hwframe_ctx_init)(struct AVBufferRef*);

int dyn_av_hwframe_ctx_init(struct AVBufferRef* p0) {
    return _av_hwframe_ctx_init(p0);
};

static void* (*_av_malloc)(size_t);

void* dyn_av_malloc(size_t p0) {
    return _av_malloc(p0);
};

static struct AVRational (*_av_mul_q)(struct AVRational, struct AVRational);

struct AVRational dyn_av_mul_q(struct AVRational p0, struct AVRational p1) {
    return _av_mul_q(p0, p1);
};

static struct AVFrame* (*_av_frame_alloc)();

struct AVFrame* dyn_av_frame_alloc() {
    return _av_frame_alloc();
};

static int (*_av_hwdevice_ctx_create)(struct AVBufferRef**, uint32_t, char*, struct AVDictionary*, int);

int dyn_av_hwdevice_ctx_create(struct AVBufferRef** p0, uint32_t p1, char* p2, struct AVDictionary* p3, int p4) {
    return _av_hwdevice_ctx_create(p0, p1, p2, p3, p4);
};

static struct AVBufferRef* (*_av_hwframe_ctx_alloc)(struct AVBufferRef*);

struct AVBufferRef* dyn_av_hwframe_ctx_alloc(struct AVBufferRef* p0) {
    return _av_hwframe_ctx_alloc(p0);
};

static struct AVBufferRef* (*_av_buffer_ref)(struct AVBufferRef*);

struct AVBufferRef* dyn_av_buffer_ref(struct AVBufferRef* p0) {
    return _av_buffer_ref(p0);
};

static int (*_av_frame_ref)(struct AVFrame*, struct AVFrame*);

int dyn_av_frame_ref(struct AVFrame* p0, struct AVFrame* p1) {
    return _av_frame_ref(p0, p1);
};

static int64_t (*_av_rescale_rnd)(int64_t, int64_t, int64_t, uint32_t);

int64_t dyn_av_rescale_rnd(int64_t p0, int64_t p1, int64_t p2, uint32_t p3) {
    return _av_rescale_rnd(p0, p1, p2, p3);
};

static int (*_av_dict_set)(struct AVDictionary**, char*, char*, int);

int dyn_av_dict_set(struct AVDictionary** p0, char* p1, char* p2, int p3) {
    return _av_dict_set(p0, p1, p2, p3);
};

static int (*_av_opt_set)(void*, char*, char*, int);

int dyn_av_opt_set(void* p0, char* p1, char* p2, int p3) {
    return _av_opt_set(p0, p1, p2, p3);
};

static int (*_av_opt_set_bin)(void*, char*, uint8_t*, int, int);

int dyn_av_opt_set_bin(void* p0, char* p1, uint8_t* p2, int p3, int p4) {
    return _av_opt_set_bin(p0, p1, p2, p3, p4);
};

static int (*_av_opt_set_double)(void*, char*, double, int);

int dyn_av_opt_set_double(void* p0, char* p1, double p2, int p3) {
    return _av_opt_set_double(p0, p1, p2, p3);
};

static int (*_av_opt_set_int)(void*, char*, int64_t, int);

int dyn_av_opt_set_int(void* p0, char* p1, int64_t p2, int p3) {
    return _av_opt_set_int(p0, p1, p2, p3);
};

static int (*_av_opt_set_pixel_fmt)(void*, char*, int32_t, int);

int dyn_av_opt_set_pixel_fmt(void* p0, char* p1, int32_t p2, int p3) {
    return _av_opt_set_pixel_fmt(p0, p1, p2, p3);
};

static int (*_av_opt_set_q)(void*, char*, struct AVRational, int);

int dyn_av_opt_set_q(void* p0, char* p1, struct AVRational p2, int p3) {
    return _av_opt_set_q(p0, p1, p2, p3);
};

static int (*_av_hwframe_transfer_data)(struct AVFrame*, struct AVFrame*, int);

int dyn_av_hwframe_transfer_data(struct AVFrame* p0, struct AVFrame* p1, int p2) {
    return _av_hwframe_transfer_data(p0, p1, p2);
};

static void (*_av_buffer_unref)(struct AVBufferRef**);

void dyn_av_buffer_unref(struct AVBufferRef** p0) {
    _av_buffer_unref(p0);
};

static void (*_av_frame_unref)(struct AVFrame*);

void dyn_av_frame_unref(struct AVFrame* p0) {
    _av_frame_unref(p0);
};

static char* (*_av_chroma_location_name)(uint32_t);

char* dyn_av_chroma_location_name(uint32_t p0) {
    return _av_chroma_location_name(p0);
};

static char* (*_av_color_primaries_name)(uint32_t);

char* dyn_av_color_primaries_name(uint32_t p0) {
    return _av_color_primaries_name(p0);
};

static char* (*_av_color_range_name)(uint32_t);

char* dyn_av_color_range_name(uint32_t p0) {
    return _av_color_range_name(p0);
};

static char* (*_av_color_space_name)(uint32_t);

char* dyn_av_color_space_name(uint32_t p0) {
    return _av_color_space_name(p0);
};

static char* (*_av_color_transfer_name)(uint32_t);

char* dyn_av_color_transfer_name(uint32_t p0) {
    return _av_color_transfer_name(p0);
};

static char* (*_av_hwdevice_get_type_name)(uint32_t);

char* dyn_av_hwdevice_get_type_name(uint32_t p0) {
    return _av_hwdevice_get_type_name(p0);
};

static char* (*_av_get_media_type_string)(int32_t);

char* dyn_av_get_media_type_string(int32_t p0) {
    return _av_get_media_type_string(p0);
};

static char* (*_av_get_pix_fmt_name)(int32_t);

char* dyn_av_get_pix_fmt_name(int32_t p0) {
    return _av_get_pix_fmt_name(p0);
};

static char* (*_av_get_sample_fmt_name)(int32_t);

char* dyn_av_get_sample_fmt_name(int32_t p0) {
    return _av_get_sample_fmt_name(p0);
};

char *goav_load_avutil() {
    char *ret;
    handle = dlopen("libavutil.so", RTLD_NOW | RTLD_GLOBAL);
    if (ret = dlerror()) {
        return ret;
    }
    _av_frame_copy_props = dlsym(handle, "av_frame_copy_props");
    if (ret = dlerror()) {
        return ret;
    }
    _av_strdup = dlsym(handle, "av_strdup");
    if (ret = dlerror()) {
        return ret;
    }
    _av_opt_find2 = dlsym(handle, "av_opt_find2");
    if (ret = dlerror()) {
        return ret;
    }
    _av_free = dlsym(handle, "av_free");
    if (ret = dlerror()) {
        return ret;
    }
    _av_dict_free = dlsym(handle, "av_dict_free");
    if (ret = dlerror()) {
        return ret;
    }
    _av_frame_free = dlsym(handle, "av_frame_free");
    if (ret = dlerror()) {
        return ret;
    }
    _av_hwframe_get_buffer = dlsym(handle, "av_hwframe_get_buffer");
    if (ret = dlerror()) {
        return ret;
    }
    _av_hwframe_ctx_init = dlsym(handle, "av_hwframe_ctx_init");
    if (ret = dlerror()) {
        return ret;
    }
    _av_malloc = dlsym(handle, "av_malloc");
    if (ret = dlerror()) {
        return ret;
    }
    _av_mul_q = dlsym(handle, "av_mul_q");
    if (ret = dlerror()) {
        return ret;
    }
    _av_frame_alloc = dlsym(handle, "av_frame_alloc");
    if (ret = dlerror()) {
        return ret;
    }
    _av_hwdevice_ctx_create = dlsym(handle, "av_hwdevice_ctx_create");
    if (ret = dlerror()) {
        return ret;
    }
    _av_hwframe_ctx_alloc = dlsym(handle, "av_hwframe_ctx_alloc");
    if (ret = dlerror()) {
        return ret;
    }
    _av_buffer_ref = dlsym(handle, "av_buffer_ref");
    if (ret = dlerror()) {
        return ret;
    }
    _av_frame_ref = dlsym(handle, "av_frame_ref");
    if (ret = dlerror()) {
        return ret;
    }
    _av_rescale_rnd = dlsym(handle, "av_rescale_rnd");
    if (ret = dlerror()) {
        return ret;
    }
    _av_dict_set = dlsym(handle, "av_dict_set");
    if (ret = dlerror()) {
        return ret;
    }
    _av_opt_set = dlsym(handle, "av_opt_set");
    if (ret = dlerror()) {
        return ret;
    }
    _av_opt_set_bin = dlsym(handle, "av_opt_set_bin");
    if (ret = dlerror()) {
        return ret;
    }
    _av_opt_set_double = dlsym(handle, "av_opt_set_double");
    if (ret = dlerror()) {
        return ret;
    }
    _av_opt_set_int = dlsym(handle, "av_opt_set_int");
    if (ret = dlerror()) {
        return ret;
    }
    _av_opt_set_pixel_fmt = dlsym(handle, "av_opt_set_pixel_fmt");
    if (ret = dlerror()) {
        return ret;
    }
    _av_opt_set_q = dlsym(handle, "av_opt_set_q");
    if (ret = dlerror()) {
        return ret;
    }
    _av_hwframe_transfer_data = dlsym(handle, "av_hwframe_transfer_data");
    if (ret = dlerror()) {
        return ret;
    }
    _av_buffer_unref = dlsym(handle, "av_buffer_unref");
    if (ret = dlerror()) {
        return ret;
    }
    _av_frame_unref = dlsym(handle, "av_frame_unref");
    if (ret = dlerror()) {
        return ret;
    }
    _av_chroma_location_name = dlsym(handle, "av_chroma_location_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_color_primaries_name = dlsym(handle, "av_color_primaries_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_color_range_name = dlsym(handle, "av_color_range_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_color_space_name = dlsym(handle, "av_color_space_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_color_transfer_name = dlsym(handle, "av_color_transfer_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_hwdevice_get_type_name = dlsym(handle, "av_hwdevice_get_type_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_get_media_type_string = dlsym(handle, "av_get_media_type_string");
    if (ret = dlerror()) {
        return ret;
    }
    _av_get_pix_fmt_name = dlsym(handle, "av_get_pix_fmt_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_get_sample_fmt_name = dlsym(handle, "av_get_sample_fmt_name");
    if (ret = dlerror()) {
        return ret;
    }
    return 0;
}
*/
import "C"

var (
	initOnce  sync.Once
	initError error
	initFuncs []func()
)

func dynamicInit() {
	initOnce.Do(func() {
		if ret := C.goav_load_avutil(); ret != nil {
			initError = errors.Errorf("failed to initialize libavutil: %s", C.GoString(ret))
		} else {
			for _, f := range initFuncs {
				f()
			}
		}
	})
	if initError != nil {
		panic(initError)
	}
}
func CopyFrameProps(p0 *Frame, p1 *Frame) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_frame_copy_props((*C.struct_AVFrame)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func DupeString(p0 string) *common.CChar {
	dynamicInit()
	var s0 *C.char
	if p0 != "" {
		s0 = C.CString(p0)
		defer C.free(unsafe.Pointer(s0))
	}
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_strdup(s0)))
}
func FindOpt(p0 unsafe.Pointer, p1 string, p2 string, p3 int32, p4 int32, p5 *unsafe.Pointer) *Option {
	dynamicInit()
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	var s2 *C.char
	if p2 != "" {
		s2 = C.CString(p2)
		defer C.free(unsafe.Pointer(s2))
	}
	defer runtime.KeepAlive(p3)
	defer runtime.KeepAlive(p4)
	return (*Option)(unsafe.Pointer(C.dyn_av_opt_find2(p0, s1, s2, *(*C.int)(unsafe.Pointer(&p3)), *(*C.int)(unsafe.Pointer(&p4)), p5)))
}
func Free(p0 unsafe.Pointer) {
	dynamicInit()
	C.dyn_av_free(p0)
}
func FreeDict(p0 **Dictionary) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_av_dict_free((**C.struct_AVDictionary)(unsafe.Pointer(p0)))
}
func FreeFrame(p0 **Frame) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_av_frame_free((**C.struct_AVFrame)(unsafe.Pointer(p0)))
}
func GetHWFrameBuffer(p0 *BufferRef, p1 *Frame, p2 int32) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	ret := C.dyn_av_hwframe_get_buffer((*C.struct_AVBufferRef)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)), *(*C.int)(unsafe.Pointer(&p2)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func InitHWFramesContext(p0 *BufferRef) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	ret := C.dyn_av_hwframe_ctx_init((*C.struct_AVBufferRef)(unsafe.Pointer(p0)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func Malloc(p0 uint64) unsafe.Pointer {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	return C.dyn_av_malloc(*(*C.size_t)(unsafe.Pointer(&p0)))
}
func MultiplyRational(p0 Rational, p1 Rational) Rational {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_mul_q(*(*C.struct_AVRational)(unsafe.Pointer(&p0)), *(*C.struct_AVRational)(unsafe.Pointer(&p1)))
	return *(*Rational)(unsafe.Pointer(&ret))
}
func NewFrame() *Frame {
	dynamicInit()
	return (*Frame)(unsafe.Pointer(C.dyn_av_frame_alloc()))
}
func NewHWDeviceContext(p0 **BufferRef, p1 HWDeviceType, p2 string, p3 *Dictionary, p4 int32) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	var s2 *C.char
	if p2 != "" {
		s2 = C.CString(p2)
		defer C.free(unsafe.Pointer(s2))
	}
	defer runtime.KeepAlive(p3)
	defer runtime.KeepAlive(p4)
	ret := C.dyn_av_hwdevice_ctx_create((**C.struct_AVBufferRef)(unsafe.Pointer(p0)), (C.uint32_t)(p1), s2, (*C.struct_AVDictionary)(unsafe.Pointer(p3)), *(*C.int)(unsafe.Pointer(&p4)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func NewHWFramesContext(p0 *BufferRef) *BufferRef {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	return (*BufferRef)(unsafe.Pointer(C.dyn_av_hwframe_ctx_alloc((*C.struct_AVBufferRef)(unsafe.Pointer(p0)))))
}
func RefBuffer(p0 *BufferRef) *BufferRef {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	return (*BufferRef)(unsafe.Pointer(C.dyn_av_buffer_ref((*C.struct_AVBufferRef)(unsafe.Pointer(p0)))))
}
func RefFrame(p0 *Frame, p1 *Frame) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_frame_ref((*C.struct_AVFrame)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func RescaleRound(p0 int64, p1 int64, p2 int64, p3 Rounding) int64 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	ret := C.dyn_av_rescale_rnd(*(*C.int64_t)(unsafe.Pointer(&p0)), *(*C.int64_t)(unsafe.Pointer(&p1)), *(*C.int64_t)(unsafe.Pointer(&p2)), (C.uint32_t)(p3))
	return *(*int64)(unsafe.Pointer(&ret))
}
func SetDict(p0 **Dictionary, p1 string, p2 string, p3 int32) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	var s2 *C.char
	if p2 != "" {
		s2 = C.CString(p2)
		defer C.free(unsafe.Pointer(s2))
	}
	defer runtime.KeepAlive(p3)
	ret := C.dyn_av_dict_set((**C.struct_AVDictionary)(unsafe.Pointer(p0)), s1, s2, *(*C.int)(unsafe.Pointer(&p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SetOpt(p0 unsafe.Pointer, p1 string, p2 string, p3 int32) int32 {
	dynamicInit()
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	var s2 *C.char
	if p2 != "" {
		s2 = C.CString(p2)
		defer C.free(unsafe.Pointer(s2))
	}
	defer runtime.KeepAlive(p3)
	ret := C.dyn_av_opt_set(p0, s1, s2, *(*C.int)(unsafe.Pointer(&p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SetOptBin(p0 unsafe.Pointer, p1 string, p2 *uint8, p3 int32, p4 int32) int32 {
	dynamicInit()
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	defer runtime.KeepAlive(p4)
	ret := C.dyn_av_opt_set_bin(p0, s1, (*C.uint8_t)(unsafe.Pointer(p2)), *(*C.int)(unsafe.Pointer(&p3)), *(*C.int)(unsafe.Pointer(&p4)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SetOptDouble(p0 unsafe.Pointer, p1 string, p2 float64, p3 int32) int32 {
	dynamicInit()
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	ret := C.dyn_av_opt_set_double(p0, s1, *(*C.double)(unsafe.Pointer(&p2)), *(*C.int)(unsafe.Pointer(&p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SetOptInt(p0 unsafe.Pointer, p1 string, p2 int64, p3 int32) int32 {
	dynamicInit()
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	ret := C.dyn_av_opt_set_int(p0, s1, *(*C.int64_t)(unsafe.Pointer(&p2)), *(*C.int)(unsafe.Pointer(&p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SetOptPixelFormat(p0 unsafe.Pointer, p1 string, p2 PixelFormat, p3 int32) int32 {
	dynamicInit()
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p3)
	ret := C.dyn_av_opt_set_pixel_fmt(p0, s1, (C.int32_t)(p2), *(*C.int)(unsafe.Pointer(&p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SetOptRational(p0 unsafe.Pointer, p1 string, p2 Rational, p3 int32) int32 {
	dynamicInit()
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	ret := C.dyn_av_opt_set_q(p0, s1, *(*C.struct_AVRational)(unsafe.Pointer(&p2)), *(*C.int)(unsafe.Pointer(&p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func TransferHWFrameData(p0 *Frame, p1 *Frame, p2 int32) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	ret := C.dyn_av_hwframe_transfer_data((*C.struct_AVFrame)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)), *(*C.int)(unsafe.Pointer(&p2)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func UnrefBuffer(p0 **BufferRef) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_av_buffer_unref((**C.struct_AVBufferRef)(unsafe.Pointer(p0)))
}
func UnrefFrame(p0 *Frame) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_av_frame_unref((*C.struct_AVFrame)(unsafe.Pointer(p0)))
}
func getChromaLocationName(p0 uint32) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_chroma_location_name(p0)))
}
func getColorPrimariesName(p0 uint32) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_color_primaries_name(p0)))
}
func getColorRangeName(p0 uint32) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_color_range_name(p0)))
}
func getColorSpaceName(p0 uint32) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_color_space_name(p0)))
}
func getColorTransferName(p0 uint32) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_color_transfer_name(p0)))
}
func getHWDeviceTypeName(p0 HWDeviceType) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_hwdevice_get_type_name((C.uint32_t)(p0))))
}
func getMediaTypeString(p0 MediaType) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_get_media_type_string((C.int32_t)(p0))))
}
func getPixelFormatName(p0 PixelFormat) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_get_pix_fmt_name((C.int32_t)(p0))))
}
func getSampleFormatName(p0 SampleFormat) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_get_sample_fmt_name((C.int32_t)(p0))))
}
