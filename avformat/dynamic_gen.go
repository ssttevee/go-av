// Code generated by robots; DO NOT EDIT.
//go:build av_dynamic
// +build av_dynamic

package avformat

import (
	errors "github.com/pkg/errors"
	avcodec "github.com/ssttevee/go-av/avcodec"
	avutil "github.com/ssttevee/go-av/avutil"
	"runtime"
	"sync"
	"unsafe"
)

/*
#cgo LDFLAGS: -ldl

#include <stdlib.h>
#include <stdint.h>
#include <dlfcn.h>

struct AVCodec;
struct AVDictionary;
struct AVFormatContext;
struct AVFrame;
struct AVIOContext;
struct AVInputFormat;
struct AVOutputFormat;
struct AVPacket;
struct AVRational{};
struct AVStream;

static void *handle = 0;

static int (*_avio_close)(struct AVIOContext*);

int dyn_avio_close(struct AVIOContext* p0) {
    return _avio_close(p0);
};

static void (*_avformat_close_input)(struct AVFormatContext**);

void dyn_avformat_close_input(struct AVFormatContext** p0) {
    _avformat_close_input(p0);
};

static int (*_av_find_best_stream)(struct AVFormatContext*, int32_t, int, int, struct AVCodec**, int);

int dyn_av_find_best_stream(struct AVFormatContext* p0, int32_t p1, int p2, int p3, struct AVCodec** p4, int p5) {
    return _av_find_best_stream(p0, p1, p2, p3, p4, p5);
};

static int (*_avformat_find_stream_info)(struct AVFormatContext*, struct AVDictionary**);

int dyn_avformat_find_stream_info(struct AVFormatContext* p0, struct AVDictionary** p1) {
    return _avformat_find_stream_info(p0, p1);
};

static void (*_avformat_free_context)(struct AVFormatContext*);

void dyn_avformat_free_context(struct AVFormatContext* p0) {
    _avformat_free_context(p0);
};

static void (*_avio_context_free)(struct AVIOContext**);

void dyn_avio_context_free(struct AVIOContext** p0) {
    _avio_context_free(p0);
};

static struct AVRational (*_av_guess_frame_rate)(struct AVFormatContext*, struct AVStream*, struct AVFrame*);

struct AVRational dyn_av_guess_frame_rate(struct AVFormatContext* p0, struct AVStream* p1, struct AVFrame* p2) {
    return _av_guess_frame_rate(p0, p1, p2);
};

static struct AVFormatContext* (*_avformat_alloc_context)();

struct AVFormatContext* dyn_avformat_alloc_context() {
    return _avformat_alloc_context();
};

static struct AVIOContext* (*_avio_alloc_context)(unsigned char*, int, int, void*, void (*p4)(), void (*p5)(), void (*p6)());

struct AVIOContext* dyn_avio_alloc_context(unsigned char* p0, int p1, int p2, void* p3, void (*p4)(), void (*p5)(), void (*p6)()) {
    return _avio_alloc_context(p0, p1, p2, p3, p4, p5, p6);
};

static int (*_avformat_alloc_output_context2)(struct AVFormatContext**, struct AVOutputFormat*, char*, char*);

int dyn_avformat_alloc_output_context2(struct AVFormatContext** p0, struct AVOutputFormat* p1, char* p2, char* p3) {
    return _avformat_alloc_output_context2(p0, p1, p2, p3);
};

static struct AVStream* (*_avformat_new_stream)(struct AVFormatContext*, struct AVCodec*);

struct AVStream* dyn_avformat_new_stream(struct AVFormatContext* p0, struct AVCodec* p1) {
    return _avformat_new_stream(p0, p1);
};

static int (*_avio_open)(struct AVIOContext**, char*, int);

int dyn_avio_open(struct AVIOContext** p0, char* p1, int p2) {
    return _avio_open(p0, p1, p2);
};

static int (*_avformat_open_input)(struct AVFormatContext**, char*, struct AVInputFormat*, struct AVDictionary**);

int dyn_avformat_open_input(struct AVFormatContext** p0, char* p1, struct AVInputFormat* p2, struct AVDictionary** p3) {
    return _avformat_open_input(p0, p1, p2, p3);
};

static int (*_av_read_frame)(struct AVFormatContext*, struct AVPacket*);

int dyn_av_read_frame(struct AVFormatContext* p0, struct AVPacket* p1) {
    return _av_read_frame(p0, p1);
};

static int (*_avformat_seek_file)(struct AVFormatContext*, int, int64_t, int64_t, int64_t, int);

int dyn_avformat_seek_file(struct AVFormatContext* p0, int p1, int64_t p2, int64_t p3, int64_t p4, int p5) {
    return _avformat_seek_file(p0, p1, p2, p3, p4, p5);
};

static int (*_avformat_write_header)(struct AVFormatContext*, struct AVDictionary**);

int dyn_avformat_write_header(struct AVFormatContext* p0, struct AVDictionary** p1) {
    return _avformat_write_header(p0, p1);
};

static int (*_av_interleaved_write_frame)(struct AVFormatContext*, struct AVPacket*);

int dyn_av_interleaved_write_frame(struct AVFormatContext* p0, struct AVPacket* p1) {
    return _av_interleaved_write_frame(p0, p1);
};

static int (*_av_write_trailer)(struct AVFormatContext*);

int dyn_av_write_trailer(struct AVFormatContext* p0) {
    return _av_write_trailer(p0);
};

char *goav_load_avformat() {
    char *ret;
    handle = dlopen("libavformat.so", RTLD_NOW | RTLD_GLOBAL);
    if (ret = dlerror()) {
        return ret;
    }
    _avio_close = dlsym(handle, "avio_close");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_close_input = dlsym(handle, "avformat_close_input");
    if (ret = dlerror()) {
        return ret;
    }
    _av_find_best_stream = dlsym(handle, "av_find_best_stream");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_find_stream_info = dlsym(handle, "avformat_find_stream_info");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_free_context = dlsym(handle, "avformat_free_context");
    if (ret = dlerror()) {
        return ret;
    }
    _avio_context_free = dlsym(handle, "avio_context_free");
    if (ret = dlerror()) {
        return ret;
    }
    _av_guess_frame_rate = dlsym(handle, "av_guess_frame_rate");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_alloc_context = dlsym(handle, "avformat_alloc_context");
    if (ret = dlerror()) {
        return ret;
    }
    _avio_alloc_context = dlsym(handle, "avio_alloc_context");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_alloc_output_context2 = dlsym(handle, "avformat_alloc_output_context2");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_new_stream = dlsym(handle, "avformat_new_stream");
    if (ret = dlerror()) {
        return ret;
    }
    _avio_open = dlsym(handle, "avio_open");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_open_input = dlsym(handle, "avformat_open_input");
    if (ret = dlerror()) {
        return ret;
    }
    _av_read_frame = dlsym(handle, "av_read_frame");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_seek_file = dlsym(handle, "avformat_seek_file");
    if (ret = dlerror()) {
        return ret;
    }
    _avformat_write_header = dlsym(handle, "avformat_write_header");
    if (ret = dlerror()) {
        return ret;
    }
    _av_interleaved_write_frame = dlsym(handle, "av_interleaved_write_frame");
    if (ret = dlerror()) {
        return ret;
    }
    _av_write_trailer = dlsym(handle, "av_write_trailer");
    if (ret = dlerror()) {
        return ret;
    }
    return 0;
}
*/
import "C"

var (
	initOnce  sync.Once
	initError error
	initFuncs []func()
)

func dynamicInit() {
	initOnce.Do(func() {
		if ret := C.goav_load_avformat(); ret != nil {
			initError = errors.Errorf("failed to initialize libavformat: %s", C.GoString(ret))
		} else {
			for _, f := range initFuncs {
				f()
			}
		}
	})
	if initError != nil {
		panic(initError)
	}
}
func CloseIO(p0 *IOContext) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	ret := C.dyn_avio_close((*C.struct_AVIOContext)(unsafe.Pointer(p0)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func CloseInput(p0 **Context) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_avformat_close_input((**C.struct_AVFormatContext)(unsafe.Pointer(p0)))
}
func FindBestStream(p0 *Context, p1 avutil.MediaType, p2 int32, p3 int32, p4 **avcodec.Codec, p5 int32) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	defer runtime.KeepAlive(p4)
	defer runtime.KeepAlive(p5)
	ret := C.dyn_av_find_best_stream((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (C.int32_t)(p1), *(*C.int)(unsafe.Pointer(&p2)), *(*C.int)(unsafe.Pointer(&p3)), (**C.struct_AVCodec)(unsafe.Pointer(p4)), *(*C.int)(unsafe.Pointer(&p5)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func FindStreamInfo(p0 *Context, p1 **avutil.Dictionary) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avformat_find_stream_info((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (**C.struct_AVDictionary)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func FreeContext(p0 *Context) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_avformat_free_context((*C.struct_AVFormatContext)(unsafe.Pointer(p0)))
}
func FreeIOContext(p0 **IOContext) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_avio_context_free((**C.struct_AVIOContext)(unsafe.Pointer(p0)))
}
func GuessFrameRate(p0 *Context, p1 *Stream, p2 *avutil.Frame) avutil.Rational {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	ret := C.dyn_av_guess_frame_rate((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVStream)(unsafe.Pointer(p1)), (*C.struct_AVFrame)(unsafe.Pointer(p2)))
	return *(*avutil.Rational)(unsafe.Pointer(&ret))
}
func NewContext() *Context {
	dynamicInit()
	return (*Context)(unsafe.Pointer(C.dyn_avformat_alloc_context()))
}
func NewIOContext(p0 *byte, p1 int32, p2 int32, p3 unsafe.Pointer, p4 unsafe.Pointer, p5 unsafe.Pointer, p6 unsafe.Pointer) *IOContext {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	return (*IOContext)(unsafe.Pointer(C.dyn_avio_alloc_context((*C.uchar)(unsafe.Pointer(p0)), *(*C.int)(unsafe.Pointer(&p1)), *(*C.int)(unsafe.Pointer(&p2)), p3, (*[0]byte)(p4), (*[0]byte)(p5), (*[0]byte)(p6))))
}
func NewOutputContext(p0 **Context, p1 *C.struct_AVOutputFormat, p2 string, p3 string) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	var s2 *C.char
	if p2 != "" {
		s2 = C.CString(p2)
		defer C.free(unsafe.Pointer(s2))
	}
	var s3 *C.char
	if p3 != "" {
		s3 = C.CString(p3)
		defer C.free(unsafe.Pointer(s3))
	}
	ret := C.dyn_avformat_alloc_output_context2((**C.struct_AVFormatContext)(unsafe.Pointer(p0)), p1, s2, s3)
	return *(*int32)(unsafe.Pointer(&ret))
}
func NewStream(p0 *Context, p1 *avcodec.Codec) *Stream {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	return (*Stream)(unsafe.Pointer(C.dyn_avformat_new_stream((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVCodec)(unsafe.Pointer(p1)))))
}
func OpenIO(p0 **IOContext, p1 string, p2 int32) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	ret := C.dyn_avio_open((**C.struct_AVIOContext)(unsafe.Pointer(p0)), s1, *(*C.int)(unsafe.Pointer(&p2)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func OpenInput(p0 **Context, p1 string, p2 *InputFormat, p3 **avutil.Dictionary) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	ret := C.dyn_avformat_open_input((**C.struct_AVFormatContext)(unsafe.Pointer(p0)), s1, (*C.struct_AVInputFormat)(unsafe.Pointer(p2)), (**C.struct_AVDictionary)(unsafe.Pointer(p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReadFrame(p0 *Context, p1 *avcodec.Packet) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_read_frame((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SeekFile(p0 *Context, p1 int32, p2 int64, p3 int64, p4 int64, p5 int32) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	defer runtime.KeepAlive(p4)
	defer runtime.KeepAlive(p5)
	ret := C.dyn_avformat_seek_file((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), *(*C.int)(unsafe.Pointer(&p1)), *(*C.int64_t)(unsafe.Pointer(&p2)), *(*C.int64_t)(unsafe.Pointer(&p3)), *(*C.int64_t)(unsafe.Pointer(&p4)), *(*C.int)(unsafe.Pointer(&p5)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func WriteHeader(p0 *Context, p1 **avutil.Dictionary) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avformat_write_header((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (**C.struct_AVDictionary)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func WriteInterleavedFrame(p0 *Context, p1 *avcodec.Packet) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_interleaved_write_frame((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func WriteTrailer(p0 *Context) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	ret := C.dyn_av_write_trailer((*C.struct_AVFormatContext)(unsafe.Pointer(p0)))
	return *(*int32)(unsafe.Pointer(&ret))
}
