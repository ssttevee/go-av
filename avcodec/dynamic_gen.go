// Code generated by robots; DO NOT EDIT.
//go:build av_dynamic
// +build av_dynamic

package avcodec

import (
	errors "github.com/pkg/errors"
	avutil "github.com/ssttevee/go-av/avutil"
	common "github.com/ssttevee/go-av/internal/common"
	"runtime"
	"sync"
	"unsafe"
)

/*
#cgo LDFLAGS: -ldl

#include <stdlib.h>
#include <stdint.h>
#include <dlfcn.h>

struct AVBSFContext;
struct AVBitStreamFilter;
struct AVCodec;
struct AVCodecContext;
struct AVCodecParameters;
struct AVDictionary;
struct AVFrame;
struct AVPacket;

static void *handle = 0;

static int (*_avcodec_parameters_copy)(struct AVCodecParameters*, struct AVCodecParameters*);

int dyn_avcodec_parameters_copy(struct AVCodecParameters* p0, struct AVCodecParameters* p1) {
    return _avcodec_parameters_copy(p0, p1);
};

static struct AVCodec* (*_avcodec_find_decoder)(uint32_t);

struct AVCodec* dyn_avcodec_find_decoder(uint32_t p0) {
    return _avcodec_find_decoder(p0);
};

static struct AVCodec* (*_avcodec_find_decoder_by_name)(char*);

struct AVCodec* dyn_avcodec_find_decoder_by_name(char* p0) {
    return _avcodec_find_decoder_by_name(p0);
};

static struct AVCodec* (*_avcodec_find_encoder)(uint32_t);

struct AVCodec* dyn_avcodec_find_encoder(uint32_t p0) {
    return _avcodec_find_encoder(p0);
};

static struct AVCodec* (*_avcodec_find_encoder_by_name)(char*);

struct AVCodec* dyn_avcodec_find_encoder_by_name(char* p0) {
    return _avcodec_find_encoder_by_name(p0);
};

static void (*_av_bsf_free)(struct AVBSFContext**);

void dyn_av_bsf_free(struct AVBSFContext** p0) {
    _av_bsf_free(p0);
};

static void (*_avcodec_free_context)(struct AVCodecContext**);

void dyn_avcodec_free_context(struct AVCodecContext** p0) {
    _avcodec_free_context(p0);
};

static void (*_av_packet_free)(struct AVPacket**);

void dyn_av_packet_free(struct AVPacket** p0) {
    _av_packet_free(p0);
};

static struct AVBitStreamFilter* (*_av_bsf_get_by_name)(char*);

struct AVBitStreamFilter* dyn_av_bsf_get_by_name(char* p0) {
    return _av_bsf_get_by_name(p0);
};

static char* (*_av_get_profile_name)(struct AVCodec*, int);

char* dyn_av_get_profile_name(struct AVCodec* p0, int p1) {
    return _av_get_profile_name(p0, p1);
};

static int (*_av_bsf_init)(struct AVBSFContext*);

int dyn_av_bsf_init(struct AVBSFContext* p0) {
    return _av_bsf_init(p0);
};

static int (*_av_bsf_alloc)(struct AVBitStreamFilter*, struct AVBSFContext**);

int dyn_av_bsf_alloc(struct AVBitStreamFilter* p0, struct AVBSFContext** p1) {
    return _av_bsf_alloc(p0, p1);
};

static struct AVCodecContext* (*_avcodec_alloc_context3)(struct AVCodec*);

struct AVCodecContext* dyn_avcodec_alloc_context3(struct AVCodec* p0) {
    return _avcodec_alloc_context3(p0);
};

static struct AVPacket* (*_av_packet_alloc)();

struct AVPacket* dyn_av_packet_alloc() {
    return _av_packet_alloc();
};

static int (*_avcodec_open2)(struct AVCodecContext*, struct AVCodec*, struct AVDictionary**);

int dyn_avcodec_open2(struct AVCodecContext* p0, struct AVCodec* p1, struct AVDictionary** p2) {
    return _avcodec_open2(p0, p1, p2);
};

static int (*_avcodec_parameters_from_context)(struct AVCodecParameters*, struct AVCodecContext*);

int dyn_avcodec_parameters_from_context(struct AVCodecParameters* p0, struct AVCodecContext* p1) {
    return _avcodec_parameters_from_context(p0, p1);
};

static int (*_avcodec_parameters_to_context)(struct AVCodecContext*, struct AVCodecParameters*);

int dyn_avcodec_parameters_to_context(struct AVCodecContext* p0, struct AVCodecParameters* p1) {
    return _avcodec_parameters_to_context(p0, p1);
};

static int (*_av_bsf_receive_packet)(struct AVBSFContext*, struct AVPacket*);

int dyn_av_bsf_receive_packet(struct AVBSFContext* p0, struct AVPacket* p1) {
    return _av_bsf_receive_packet(p0, p1);
};

static int (*_avcodec_receive_frame)(struct AVCodecContext*, struct AVFrame*);

int dyn_avcodec_receive_frame(struct AVCodecContext* p0, struct AVFrame* p1) {
    return _avcodec_receive_frame(p0, p1);
};

static int (*_avcodec_receive_packet)(struct AVCodecContext*, struct AVPacket*);

int dyn_avcodec_receive_packet(struct AVCodecContext* p0, struct AVPacket* p1) {
    return _avcodec_receive_packet(p0, p1);
};

static int (*_av_packet_ref)(struct AVPacket*, struct AVPacket*);

int dyn_av_packet_ref(struct AVPacket* p0, struct AVPacket* p1) {
    return _av_packet_ref(p0, p1);
};

static int (*_av_bsf_send_packet)(struct AVBSFContext*, struct AVPacket*);

int dyn_av_bsf_send_packet(struct AVBSFContext* p0, struct AVPacket* p1) {
    return _av_bsf_send_packet(p0, p1);
};

static int (*_avcodec_send_frame)(struct AVCodecContext*, struct AVFrame*);

int dyn_avcodec_send_frame(struct AVCodecContext* p0, struct AVFrame* p1) {
    return _avcodec_send_frame(p0, p1);
};

static int (*_avcodec_send_packet)(struct AVCodecContext*, struct AVPacket*);

int dyn_avcodec_send_packet(struct AVCodecContext* p0, struct AVPacket* p1) {
    return _avcodec_send_packet(p0, p1);
};

static void (*_av_packet_unref)(struct AVPacket*);

void dyn_av_packet_unref(struct AVPacket* p0) {
    _av_packet_unref(p0);
};

static char* (*_avcodec_get_name)(uint32_t);

char* dyn_avcodec_get_name(uint32_t p0) {
    return _avcodec_get_name(p0);
};

char *goav_load_avcodec() {
    char *ret;
    handle = dlopen("libavcodec.so", RTLD_NOW | RTLD_GLOBAL);
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_parameters_copy = dlsym(handle, "avcodec_parameters_copy");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_find_decoder = dlsym(handle, "avcodec_find_decoder");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_find_decoder_by_name = dlsym(handle, "avcodec_find_decoder_by_name");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_find_encoder = dlsym(handle, "avcodec_find_encoder");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_find_encoder_by_name = dlsym(handle, "avcodec_find_encoder_by_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_bsf_free = dlsym(handle, "av_bsf_free");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_free_context = dlsym(handle, "avcodec_free_context");
    if (ret = dlerror()) {
        return ret;
    }
    _av_packet_free = dlsym(handle, "av_packet_free");
    if (ret = dlerror()) {
        return ret;
    }
    _av_bsf_get_by_name = dlsym(handle, "av_bsf_get_by_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_get_profile_name = dlsym(handle, "av_get_profile_name");
    if (ret = dlerror()) {
        return ret;
    }
    _av_bsf_init = dlsym(handle, "av_bsf_init");
    if (ret = dlerror()) {
        return ret;
    }
    _av_bsf_alloc = dlsym(handle, "av_bsf_alloc");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_alloc_context3 = dlsym(handle, "avcodec_alloc_context3");
    if (ret = dlerror()) {
        return ret;
    }
    _av_packet_alloc = dlsym(handle, "av_packet_alloc");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_open2 = dlsym(handle, "avcodec_open2");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_parameters_from_context = dlsym(handle, "avcodec_parameters_from_context");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_parameters_to_context = dlsym(handle, "avcodec_parameters_to_context");
    if (ret = dlerror()) {
        return ret;
    }
    _av_bsf_receive_packet = dlsym(handle, "av_bsf_receive_packet");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_receive_frame = dlsym(handle, "avcodec_receive_frame");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_receive_packet = dlsym(handle, "avcodec_receive_packet");
    if (ret = dlerror()) {
        return ret;
    }
    _av_packet_ref = dlsym(handle, "av_packet_ref");
    if (ret = dlerror()) {
        return ret;
    }
    _av_bsf_send_packet = dlsym(handle, "av_bsf_send_packet");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_send_frame = dlsym(handle, "avcodec_send_frame");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_send_packet = dlsym(handle, "avcodec_send_packet");
    if (ret = dlerror()) {
        return ret;
    }
    _av_packet_unref = dlsym(handle, "av_packet_unref");
    if (ret = dlerror()) {
        return ret;
    }
    _avcodec_get_name = dlsym(handle, "avcodec_get_name");
    if (ret = dlerror()) {
        return ret;
    }
    return 0;
}
*/
import "C"

var (
	initOnce  sync.Once
	initError error
	initFuncs []func()
)

func dynamicInit() {
	initOnce.Do(func() {
		if ret := C.goav_load_avcodec(); ret != nil {
			initError = errors.Errorf("failed to initialize libavcodec: %s", C.GoString(ret))
		} else {
			for _, f := range initFuncs {
				f()
			}
		}
	})
	if initError != nil {
		panic(initError)
	}
}
func CopyParameters(p0 *Parameters, p1 *Parameters) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avcodec_parameters_copy((*C.struct_AVCodecParameters)(unsafe.Pointer(p0)), (*C.struct_AVCodecParameters)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func FindDecoder(p0 ID) *Codec {
	dynamicInit()
	return (*Codec)(unsafe.Pointer(C.dyn_avcodec_find_decoder((C.uint32_t)(p0))))
}
func FindDecoderByName(p0 string) *Codec {
	dynamicInit()
	var s0 *C.char
	if p0 != "" {
		s0 = C.CString(p0)
		defer C.free(unsafe.Pointer(s0))
	}
	return (*Codec)(unsafe.Pointer(C.dyn_avcodec_find_decoder_by_name(s0)))
}
func FindEncoder(p0 ID) *Codec {
	dynamicInit()
	return (*Codec)(unsafe.Pointer(C.dyn_avcodec_find_encoder((C.uint32_t)(p0))))
}
func FindEncoderByName(p0 string) *Codec {
	dynamicInit()
	var s0 *C.char
	if p0 != "" {
		s0 = C.CString(p0)
		defer C.free(unsafe.Pointer(s0))
	}
	return (*Codec)(unsafe.Pointer(C.dyn_avcodec_find_encoder_by_name(s0)))
}
func FreeBitstreamFilter(p0 **BitstreamFilterContext) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_av_bsf_free((**C.struct_AVBSFContext)(unsafe.Pointer(p0)))
}
func FreeContext(p0 **Context) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_avcodec_free_context((**C.struct_AVCodecContext)(unsafe.Pointer(p0)))
}
func FreePacket(p0 **Packet) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_av_packet_free((**C.struct_AVPacket)(unsafe.Pointer(p0)))
}
func GetBitstreamFilterByName(p0 string) *BitstreamFilter {
	dynamicInit()
	var s0 *C.char
	if p0 != "" {
		s0 = C.CString(p0)
		defer C.free(unsafe.Pointer(s0))
	}
	return (*BitstreamFilter)(unsafe.Pointer(C.dyn_av_bsf_get_by_name(s0)))
}
func GetProfileName(p0 *Codec, p1 int32) *common.CChar {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	return (*common.CChar)(unsafe.Pointer(C.dyn_av_get_profile_name((*C.struct_AVCodec)(unsafe.Pointer(p0)), *(*C.int)(unsafe.Pointer(&p1)))))
}
func InitBitstreamFilter(p0 *BitstreamFilterContext) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	ret := C.dyn_av_bsf_init((*C.struct_AVBSFContext)(unsafe.Pointer(p0)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func NewBitstreamFilter(p0 *BitstreamFilter, p1 **BitstreamFilterContext) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_bsf_alloc((*C.struct_AVBitStreamFilter)(unsafe.Pointer(p0)), (**C.struct_AVBSFContext)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func NewContext(p0 *Codec) *Context {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	return (*Context)(unsafe.Pointer(C.dyn_avcodec_alloc_context3((*C.struct_AVCodec)(unsafe.Pointer(p0)))))
}
func NewPacket() *Packet {
	dynamicInit()
	return (*Packet)(unsafe.Pointer(C.dyn_av_packet_alloc()))
}
func Open(p0 *Context, p1 *Codec, p2 **avutil.Dictionary) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	ret := C.dyn_avcodec_open2((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVCodec)(unsafe.Pointer(p1)), (**C.struct_AVDictionary)(unsafe.Pointer(p2)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ParametersFromContext(p0 *Parameters, p1 *Context) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avcodec_parameters_from_context((*C.struct_AVCodecParameters)(unsafe.Pointer(p0)), (*C.struct_AVCodecContext)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ParametersToContext(p0 *Context, p1 *Parameters) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avcodec_parameters_to_context((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVCodecParameters)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReceiveBitstreamFilterPacket(p0 *BitstreamFilterContext, p1 *Packet) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_bsf_receive_packet((*C.struct_AVBSFContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReceiveFrame(p0 *Context, p1 *avutil.Frame) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avcodec_receive_frame((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReceivePacket(p0 *Context, p1 *Packet) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avcodec_receive_packet((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func RefPacket(p0 *Packet, p1 *Packet) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_packet_ref((*C.struct_AVPacket)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SendBitstreamFilterPacket(p0 *BitstreamFilterContext, p1 *Packet) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_av_bsf_send_packet((*C.struct_AVBSFContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SendFrame(p0 *Context, p1 *avutil.Frame) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avcodec_send_frame((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SendPacket(p0 *Context, p1 *Packet) int32 {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.dyn_avcodec_send_packet((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func UnrefPacket(p0 *Packet) {
	dynamicInit()
	defer runtime.KeepAlive(p0)
	C.dyn_av_packet_unref((*C.struct_AVPacket)(unsafe.Pointer(p0)))
}
func getName(p0 ID) *common.CChar {
	dynamicInit()
	return (*common.CChar)(unsafe.Pointer(C.dyn_avcodec_get_name((C.uint32_t)(p0))))
}
